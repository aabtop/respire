from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import platform
import shlex
import sys


def _SplitCommand(command):
  is_windows = platform.system() == 'Windows'
  return shlex.split(str(command), posix=not is_windows)


def SummaryStringForEvent(start_event):
  # Some commands that are implicitly generated by the respire python
  # infrastructure have long hashes in them and are hard to understand, so
  # we look for those and replace them with something that is easier to read
  # and more informative.
  cmd_split = _SplitCommand(start_event['command'])

  if len(cmd_split) > 2 and 'sub_respire.py' in cmd_split[2]:
    try:
      b_index = cmd_split.index('-b')
      python_file = cmd_split[b_index + 1]

      f_index = cmd_split.index('-f')
      function = cmd_split[f_index + 1]

      return python_file + ':' + function
    except:
      pass

  return str(start_event['outputs'][0])


def ShouldPubliclyLogEvent(start_event):
  '''Function to hide certain events that are respire internal details.'''
  if 'command' not in start_event:
    return False

  cmd_split = _SplitCommand(start_event['command'])

  if cmd_split[0] == sys.executable:
    if len(cmd_split) > 1 and 'flatten_output.py' in cmd_split[1]:
      return False
    if len(cmd_split) > 2 and 'sub_respire.py' in cmd_split[2]:
      f_index = cmd_split.index('-f')
      function = cmd_split[f_index + 1]
      if function == '_ResolveFutures':
        return False

  return True

